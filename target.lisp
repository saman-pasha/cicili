(in-package :cicili)

(defun specify-target (target)
  (let* ((name    (nth 1 target))
	     (args    (nth 2 target))
	     (clauses (nthcdr 3 target))
	     (target-specifier (make-specifier name '|@TARGET| nil nil nil nil nil nil args)))
    (format t "-------------------- cicili: specifying target ~A~%" name)
    (unless (zerop (mod (length args) 2)) (error (format nil "wrong target features ~A" name)))
    (let ((attributes '()))
      (dolist (clause clauses)
	    (if (consp clause)
	        (let ((construct (car clause)))
	          (cond ((find (char (symbol-name construct) 0) "@#")
		             (add-inner (specify-preprocessor clause attributes) target-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|static|)   (push clause attributes))
		            ((key-eq construct '|decl|)     (push clause attributes))
		            ((key-eq construct '|inline|)   (push clause attributes))
		            ((key-eq construct '|register|) (push clause attributes))
		            ((key-eq construct '|auto|)     (push clause attributes))
		            ((key-eq construct '|extern|)   (push clause attributes))
		            ((key-eq construct '|resolve|)  (push clause attributes))
		            ((key-eq construct '|defer|)    (push clause attributes))
		            ((key-eq construct '|include|)
		             (add-inner (specify-include  clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|var|)
		             (add-inner (specify-variable clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|func|)
		             (add-inner (specify-function clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|method|)
		             (add-inner (specify-function clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|enum|)
		             (add-inner (specify-enum     clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|struct|)
		             (add-inner (specify-struct   clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|union|)
		             (add-inner (specify-union    clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|typedef|)
		             (add-inner (specify-typedef  clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|guard|)
		             (add-inner (specify-guard    clause attributes) target-specifier) (setq attributes '()))
		            ((key-eq construct '|ghost|)
		             (add-inner (specify-guard    clause attributes t) target-specifier) (setq attributes '()))
                    ((key-eq construct '|module|)
		             (add-inner (specify-module   clause attributes) target-specifier) (setq attributes '()))
		            (t (add-inner (specify-expr   clause) target-specifier) (setq attributes '()))))
	        (error (format nil "syntax error ~A" clause))))
      target-specifier)))

(defun compile-target (file args spec globals stdout stderr dump header)
  (let ((args (if spec (attrs spec) args)))
    (if (stringp file)
        (progn
          (ensure-directories-exist file)
          (unless *only-link*
            (setq *output*
		          (open file
			            :direction :output
			            :if-does-not-exist :create
			            :if-exists :supersede))))
        (error (format t "target should be a file path")))
    (unless *only-link*
      (if (and dump (not header))
          (format t "-------------------- cicili: resolving target ~A~%" file)
          (format t "-------------------- cicili: compiling target ~A~%" file)))
    (unwind-protect
         (handler-case 
	         (progn
               (unless *only-link*
                 (funcall *line-num* 0 :reset 1)
                 (funcall *col-num* 0 :reset 1)
                 (funcall *line-num* 0 :reset 1 :actual t)
                 (funcall *col-num* 0 :reset 1 :actual t)
	             (dotimes (i (length args))
	               (when (zerop (mod i 2))
	                 (when (key-eq (nth i args) ':|std|)
		               (let ((custom (nth (+ i 1) args)))
		                 (when (key-eq custom '|true|)
                           (if *cpp*
                               (progn
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<iostream>~%"))
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<string>~%")))
                               (progn
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<stdio.h>~%"))
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<stddef.h>~%"))
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<stdint.h>~%"))
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<stdlib.h>~%"))
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<stdbool.h>~%"))
                                 (set-ast-line (output "~&#include ")) (set-ast-line (output "<string.h>~%")))))))))
	             (maphash #'(lambda (in-name in-spec)
		                      (case (construct in-spec)
			                    ('|@PREPROC|  (compile-preprocessor in-spec 0 globals spec))
			                    ('|@INCLUDE|  (compile-include      in-spec 0 globals spec))
			                    ('|@TYPEDEF|  (compile-typedef      in-spec 0 globals spec))
			                    ('|@VAR|      (compile-variable     in-spec 0 globals spec t))
			                    ('|@FUNC|     (compile-function     in-spec 0 globals spec))
			                    ('|@METHOD|   (compile-function     in-spec 0 globals spec))
			                    ('|@ENUM|     (compile-enum         in-spec 0 globals spec))
			                    ('|@STRUCT|   (compile-struct       in-spec 0 globals spec))
			                    ('|@UNION|    (compile-union        in-spec 0 globals spec))
			                    ('|@GUARD|    (compile-guard        in-spec 0 globals spec))
			                    ('|@GHOST|    (compile-guard        in-spec 0 globals spec t))
			                    ('|@MODULE|   (compile-module       in-spec 0 globals spec))
			                    (otherwise    (compile-form         in-spec 0 globals spec)
                                              (output "~%"))))
		                  (inners spec))
	             (close *output*))
               (when header (return-from compile-target t))
               (let ((is-compiled (if *only-link* t nil)))
	             (dotimes (i (length args))
	               (when (zerop (mod i 2))
	                 (when (and (not *only-link*) (key-eq (nth i args) ':|compile|))
                       (display (if *cpp* "compiler set for C++" "compiler set for C") #\Newline)
                       
		               (let* ((dumper    (if *cpp* (getf *configs* 'cpp-dumper) (getf *configs* 'dumper)))
                              (command   (if *cpp* (getf *configs* 'cpp-compiler) (getf *configs* 'compiler)))
		                      (program   (car command))
		                      (arguments (cdr command))
		                      (custom    (nth (+ i 1) args)))
                         (if (or (key-eq custom '|true|) (stringp custom))
                             (progn
		                       (if (key-eq custom '|true|)
                                   (setq custom (list "-c" file))
                                   (progn
                                     (setq custom (str:split "\\s+" custom :regex t))
                                     (let ((found nil)
                                           (cset nil))
                                       (loop for carg in custom
                                             for i from 0 to (length custom)
                                             do (if (or (string-equal carg "-c") (string-equal carg "--compile"))
                                                    (setq found t)
                                                    (when found
                                                      (setq cset t)
                                                      (setf (nth i custom) file)
                                                      (return))))
                                           (unless (and found cset)
                                             (error
                                              (format nil "custom compilation missed -c or --compile flag: ~A" custom))))))
                               (let ((cwd       (uiop/os:getcwd))
                                     (args      `(,program ,@arguments ,@custom))
                                     (dump-args `(,program ,@arguments ,@dumper ,@custom)))
                                 (setq args      (replace-args< `(("{$CWD}" ,cwd)) args))
                                 (setq dump-args (replace-args< `(("{$CWD}" ,cwd)) dump-args))
                                 (let ((exit-status
                                           (multiple-value-list
                                               (if dump
                                                   (uiop:run-program dump-args :ignore-error-status t
                                                                     :input nil :output stdout :error-output stderr)
		                                           (uiop:run-program args :ignore-error-status t
                                                                     :input nil :output stdout :error-output stderr)))))
                                   (when (and (not (equal (nth 2 exit-status) 0)) (> *ast-run* *ast-total-runs*))
                                     (error (format nil "cicili exited with status: ~A" exit-status))))))
                             (error (format nil "invalid :compile value, required a custom command or #t"))))
                       (setq is-compiled t))
	                 (when (and (not dump) (not header) (key-eq (nth i args) ':|link|))
                       (if is-compiled
		                   (let* ((command   (if *cpp* (getf *configs* 'cpp-linker) (getf *configs* 'linker)))
		                          (program   (car command))
		                          (arguments (cdr command))
		                          (custom    (nth (+ i 1) args)))
		                     (unless (key-eq custom '|false|)
                               (format t "-------------------- cicili: linking target ~A~%" file)
                               (if (key-eq custom '|true|)
                                   (setq custom (list file "-o" "main"))
                                   (when (stringp custom)
                                     (setq custom (str:split " " custom))))
                               (let ((cwd       (uiop/os:getcwd))
                                     (args      `(,program ,@arguments ,@custom)))
                                 (setq args (replace-args< `(("{$CWD}" ,cwd)) args))
		                         (let ((exit-status
                                           (multiple-value-list
                                               (uiop:run-program args :ignore-error-status t
                                                                 :input nil :output stdout :error-output stderr))))
                                   (when (and (not (equal (nth 2 exit-status) 0)) (> *ast-run* *ast-total-runs*))
                                     (error (format nil "cicili exited with status: ~A" exit-status)))))))
                           (error (format nil ":link without :compile, compilation is required"))))))))
           (uiop/run-program:subprocess-error (e) (error (format nil "~A~%" e))))
      (unless *only-link*
	    (close *output*)))))
