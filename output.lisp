(in-package :lcc)

(defun compile-name< (name)
  (if (is-name name) (symbol-name name)
      (error (format nil "wrong name ~S" name))))

(defun compile-type-name< (name)
  (cond ((key-eq name '|uchar|) "unsigned char")
	    ((key-eq name '|ushort|) "unsigned short")
	    ((key-eq name '|uint|) "unsigned int")
	    ((key-eq name '|ulong|) "unsigned long")
	    ((key-eq name '|llong|) "long long")
	    ((key-eq name '|ullong|) "unsigned long long")
	    ((key-eq name '|i8|) "int8_t")
	    ((key-eq name '|u8|) "uint8_t")
	    ((key-eq name '|i16|) "int16_t")
	    ((key-eq name '|u16|) "uint16_t")
	    ((key-eq name '|i32|) "int32_t")
	    ((key-eq name '|u32|) "uint32_t")
	    ((key-eq name '|i64|) "int64_t")
	    ((key-eq name '|u64|) "uint64_t")
	    ((key-eq name '|i128|) "__int128")
	    ((key-eq name '|u128|) "unsigned __int128")
	    ((key-eq name '|real|) "long double")
	    (t (compile-name< name))))

(defun compile-array< (desc globals)
  (cond ((null desc) "")
	    ((not (is-array desc)) (format nil "wrong array description ~A" desc))
	    ((null (nth 1 desc)) "[]")
	    (t (format nil "[~A]" (compile-form< (nth 1 desc) globals)))))

(defun format-type< (const typeof modifier const-ptr name array-def globals &optional anonymous)
  (when anonymous (setq name (format nil "/* ~A */" name)))
  (format nil "~:[~;const ~]~A~:[~; ~:*~A~]~:[~; const~]~:[~*~; ~A~]~:[~; ~A~]"
	      const (compile-type-name< typeof) modifier const-ptr
	      name name array-def (compile-array< array-def globals)))

(defun compile-type< (desc globals &optional no-text)
  (multiple-value-bind (const typeof modifier const-ptr name array-def)
      (specify-type< desc globals)
    (values (if no-text nil (format-type< const typeof modifier const-ptr name array-def globals))
	        const typeof modifier const-ptr name array-def)))

(defun compile-spec-type< (spec globals &optional no-text)
  (let ((const     (const     spec))
	    (typeof    (typeof    spec))
	    (modifier  (modifier  spec))
	    (const-ptr (const-ptr spec))
	    (name      (name      spec))
	    (array-def (array-def spec))
	    (anonymous (anonymous spec)))
    (values (if no-text nil (format-type< const typeof modifier const-ptr name array-def globals anonymous))
	        const typeof modifier const-ptr name array-def)))

(defun format-type-value< (const typeof modifier const-ptr name array-def default globals &optional anonymous)
  (when anonymous (setq name (format nil "/* ~A */" name)))
  (let ((cvalue (compile-form< default globals)))
    (format nil "~A~:[~; = ~A~]" (format-type< const typeof modifier const-ptr name array-def globals)
	        (not (null cvalue)) cvalue)))

(defun compile-type-value< (desc globals &optional no-text)
  (multiple-value-bind (const typeof modifier const-ptr name array-def default)
      (specify-type-value< desc globals)
    (values (if no-text nil (format-type-value< const typeof modifier const-ptr name array-def default globals))
	        const typeof modifier const-ptr name array-def default)))

(defun compile-spec-type-value< (spec globals &optional no-text)
  (let ((const     (const     spec))
	    (typeof    (typeof    spec))
	    (modifier  (modifier  spec))
	    (const-ptr (const-ptr spec))
	    (name      (name      spec))
	    (array-def (array-def spec))
	    (default   (default   spec))
	    (anonymous (anonymous spec)))
    (values (if no-text nil (format-type-value< const typeof modifier const-ptr name array-def default globals anonymous))
	        const typeof modifier const-ptr name array-def default)))

(defun compile-atom< (obj globals)
  (cond ((null obj) nil)
	    ((key-eq '|nil| obj) "NULL")
	    ((numberp obj) (format nil "~A" obj))
	    ((characterp obj) (if (eql obj #\Null) (format nil "'\\0'" obj) (format nil "'~C'" obj)))
	    ((stringp obj) (format nil "\"~A\"" obj))
	    ((and (symbolp obj) (is-symbol obj))
	     (if (eql (char (symbol-name obj) 0) #\0)
	         (format nil "~A" obj)
             (progn
               (if (string= (symbol-name obj) "this") (format nil "~A" '|this|)
                   (progn
	                 (unless (gethash obj globals nil) (format t "lcc\: [warning] undefined variable ~A~%" obj))                   
	                 (format nil "~A" obj))))))
	    (t (error (format nil "syntax error \"~A\"" obj)))))

(defun compile-unary< (form globals)
  (unless (= (length form) 2) (error (format nil "wrong unary form ~A" form)))
  (let* ((oprt (car form))
	     (name (symbol-name oprt))
	     (is-postfix nil))
    (when (eql (char name (- (length name) 1)) #\#)
      (setq oprt (subseq name 0 (- (length name) 1)))
      (setq is-postfix t))
    (cond ((key-eq oprt '|not|)       (setq oprt '|!|))
	      ((key-eq oprt '|contentof|) (setq oprt '|*|))
	      ((key-eq oprt '|addressof|) (setq oprt '|&|)))
    (if is-postfix
	    (format nil "~A~A" (compile-form< (cadr form) globals) oprt)
        (format nil "~A~A" oprt (compile-form< (cadr form) globals)))))

(defun compile-operator< (form globals)
  (let ((opr (car form))
	    (oprnds '()))
    (cond ((key-eq opr '|and|)    (setq opr '|&&|))
	      ((key-eq opr '|or|)     (setq opr '|\|\||))
	      ((key-eq opr '|bitand|) (setq opr '|&|))
	      ((key-eq opr '|bitor|)  (setq opr '|\||))
	      ((key-eq opr '|xor|)    (setq opr '|^|)))
    (dolist (oprnd (cdr form))
      (push opr oprnds)
      (push (compile-form< oprnd globals) oprnds))
    (format nil "(~{~A~^ ~A ~})" (cdr (nreverse oprnds)))))

(defun compile-assignment< (form globals)
  (let ((opr (car form))
	    (oprnds '()))
    (dolist (oprnd (cdr form))
      (push opr oprnds)
      (push (compile-form< oprnd globals) oprnds))
    (format nil "~{~A~^ ~A ~}" (cdr (nreverse oprnds)))))

(defun compile-nth-form< (form globals)
  (unless (= (length form) 3) (error (format nil "wrong nth form ~A" form)))
  (format nil "~A[~A]" (compile-form< (nth 2 form) globals) (compile-form< (nth 1 form) globals)))

(defun compile-?-form< (form globals)
  (unless (= (length form) 4) (error (format nil "wrong ? form ~A" form)))
  (format nil "((~A) ? ~A \: ~A)"
	      (compile-form< (nth 1 form) globals)
	      (compile-form< (nth 2 form) globals)
	      (compile-form< (nth 3 form) globals)))

(defun compile-cast-form< (form globals)
  (unless (= (length form) 3) (error (format nil "wrong cast form ~A" form)))
  (format nil "((~A)~A)"
	      (compile-type< (nth 1 form) globals)
	      (compile-form< (nth 2 form) globals)))

(defun compile-form< (form globals)
  (handler-case
      (if (atom form) (compile-atom< form globals)
	      (let ((func (car form)))
	        (cond ((listp func) (error (format nil "function name or operator is missing ~A" form)))
		          ((key-eq func '|code|) (format nil "~A" (cadr form)))
		          ((key-eq func 'QUOTE)  (format nil "{~{~A~^\, ~}}" (mapcar #'(lambda (f) (compile-form< f globals)) (cadr form))))
		          ((and (> (length form) 2) (key-eq func '\|) (key-eq (cadr form) '\|))
		           (compile-operator< (push '\|\| (cddr form)) globals))
		          ((and (> (length form) 2) (key-eq func '\|)) (compile-operator< form globals))
		          ((and (= (length form) 2) (find func *unaries* :test #'key-eq))   (compile-unary< form globals))
		          ((and (> (length form) 2) (find func *operators* :test #'key-eq)) (compile-operator< form globals))
		          ((key-eq func '|nth|)    (compile-nth-form< form globals)) 
		          ((key-eq func '|?|)      (compile-?-form< form globals)) 
		          ((key-eq func '|cast|)   (compile-cast-form< form globals))
                  ((key-eq func '|$|)
	               (format nil "(~A.~{~A~^\, ~})"
                           (compile-form< (cadr form) globals)
                           (mapcar #'(lambda (f) (compile-form< f globals)) (cddr form))))
                  ((key-eq func '|->|)
	               (format nil "(~A->~{~A~^\, ~})"
                           (compile-form< (cadr form) globals)
                           (mapcar #'(lambda (f) (compile-form< f globals)) (cddr form))))
		          (t (unless (gethash func globals nil) (format t "lcc\: [warning] undefined function ~A~%" func))
		             (format nil "~A(~{~A~^\, ~})" func (mapcar #'(lambda (f) (compile-form< f globals)) (cdr form)))))))
    (error (ex)
	  (error (format nil "~A -> ~A" ex form)))))
