(in-package :cicili)

(defun specify-generic (def attrs)
  (when (> (length attrs) 0) (error (format nil "wrong attributes ~A" attrs)))
  (let* ((name (specify-decl-name< (nth 1 def)))
         (params (nth 2 def))
	     (clauses (nthcdr 3 def))
	     (generic-specifier (make-specifier name '|@GENERIC| nil nil nil nil nil nil nil)))
    (setf (default generic-specifier) params)
    (let ((attributes '())
          (tmp-generic *generic*))
      (setf *generic* (format nil "~{~A~^~}" (remove nil (list *generic* (format nil "~{ ##~A ~^~}" params)))))
      (dolist (clause clauses)
	    (if (consp clause)
	        (let ((construct (car clause)))
	          (cond ((find (char (symbol-name construct) 0) "@#")
		             (add-inner (specify-preprocessor clause attributes) generic-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|static|)   (push clause attributes))
		            ((key-eq construct '|decl|)     (push clause attributes))
		            ((key-eq construct '|inline|)   (push clause attributes))
		            ((key-eq construct '|register|) (push clause attributes))
		            ((key-eq construct '|auto|)     (push clause attributes))
		            ((key-eq construct '|extern|)   (push clause attributes))
		            ((key-eq construct '|resolve|)  (push clause attributes))
		            ((key-eq construct '|defer|)    (push clause attributes))
		            ((key-eq construct '|func|)
		             (add-inner (specify-function clause attributes) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|method|)
		             (add-inner (specify-function clause attributes) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|struct|)
		             (add-inner (specify-struct   clause attributes) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|union|)
		             (add-inner (specify-union    clause attributes) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|guard|)
		             (add-inner (specify-guard    clause attributes) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|ghost|)
		             (add-inner (specify-guard    clause attributes t) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|module|)
		             (add-inner (specify-module   clause attributes) generic-specifier) (setq attributes '()))
		            ((key-eq construct '|generic|)
		             (add-inner (specify-generic  clause attributes) generic-specifier) (setq attributes '()))
		            (t (add-inner (specify-expr   clause) generic-specifier))))
	        (error (format nil "syntax error ~A" clause))))
      (setf *generic* tmp-generic)
      generic-specifier)))

(defun compile-generic (spec lvl globals &key ((:nested is-nested) nil))
  (let ((name (name spec))
        (params (default spec)))
    (set-ast-line (output "~&#define ~A" name))
    (output "(")
    (loop for param in params
          with l = (1- (length params))
          for i from 0 to l
          do (progn
               (set-ast-line (output "~A" param))
               (when (< i l) (output ","))))
    (output ") \\~%")
    (let ((tmp-generic *generic*)) 
      (setf *generic* t)
      (maphash #'(lambda (in-name in-spec)
		           (case (construct in-spec)
		             ('|@VAR|      (compile-variable     in-spec lvl globals))
		             ('|@FUNC|     (compile-function     in-spec lvl globals))
		             ('|@METHOD|   (compile-function     in-spec lvl globals))
		             ('|@PREPROC|  (compile-preprocessor in-spec lvl globals))
		             ('|@INCLUDE|  (compile-include      in-spec lvl globals))
		             ('|@TYPEDEF|  (compile-typedef      in-spec lvl globals))
		             ('|@ENUM|     (compile-enum         in-spec lvl globals))
		             ('|@STRUCT|   (compile-struct       in-spec lvl globals))
		             ('|@UNION|    (compile-union        in-spec lvl globals))
		             ('|@GUARD|    (compile-guard        in-spec lvl globals nil))
		             ('|@GHOST|    (compile-guard        in-spec lvl globals t))
		             ('|@MODULE|   (compile-module       in-spec lvl globals))
		             ('|@GENERIC|  (compile-generic      in-spec lvl globals :nested t))
		             (otherwise    (compile-form         in-spec lvl globals)
                                   (output "~%"))))
	           (inners spec))
      (setf *generic* tmp-generic))
    (output "~%")))
