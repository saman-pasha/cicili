(source "/tests/string_test.c")

(include "string.c")

(func main () (out int)
  (letn
    ((String * a . #'(-> String new "hello"))
     (String * b . #'(-> String new "world"))
     (String * helloWorld . #'(-> a concat b))
     (String * formatted . #'(-> String format "value: %d, %s" 42 "test"))
     (String * upper . #'(-> a toUpper))
     (String * lower . #'(-> upper toLower))
     (String * trimmed . #'(-> (-> String new "   padded   ") trim))
     (String * replaced . #'(-> (-> String new "a-b-c-d") replace #\- #\_))
     (String * substr . #'(-> helloWorld substring 3 4))
     (String * prefix . #'(-> String new "hel"))
     (String * suffix . #'(-> String new "rld"))
     (bool eq1 . #'(-> a equals a))
     (bool eq2 . #'(-> a equals b))
     (size_t index . #'(-> a find #\l))
     (bool sw . #'(-> a startsWith prefix))
     (bool ew . #'(-> helloWorld endsWith suffix)))

    (printf "a: %s\n" ($ a arr))
    (printf "b: %s\n" ($ b arr))
    (printf "helloWorld: %s\n" ($ helloWorld arr))
    (printf "formatted: %s\n" ($ formatted arr))
    (printf "upper: %s\n" ($ upper arr))
    (printf "lower: %s\n" ($ lower arr))
    (printf "trimmed: [%s]\n" ($ trimmed arr))
    (printf "replaced: %s\n" ($ replaced arr))
    (printf "substring(3,4): %s\n" ($ substr arr))
    (printf "a equals a: %s\n" (? eq1 "true" "false"))
    (printf "a equals b: %s\n" (? eq2 "true" "false"))
    (printf "find 'l' in a: %zu\n" index)
    (printf "a starts with 'hel': %s\n" (? sw "true" "false"))
    (printf "helloWorld ends with 'rld': %s\n" (? ew "true" "false")))

  (return 0))
