(in-package :cicili)

(defun specify-module (def attrs)
  (when (> (length attrs) 0) (error (format nil "wrong attributes ~A" attrs)))
  (let* ((name (specify-decl-name< (nth 1 def)))
	     (clauses (nthcdr 2 def))
	     (module-specifier (make-specifier name '|@MODULE| nil nil nil nil nil nil nil))
         (tmp-module-spec *module-spec*)
         (tmp-module-path *module-path*))
    (setq *module-spec* module-specifier)
    (setq *module-path* (append *module-path* (list (name module-specifier))))
    (let ((attributes '()))
      (dolist (clause clauses)
	    (if (consp clause)
	        (let ((construct (car clause)))
	          (cond ((find (char (symbol-name construct) 0) "@#")
		             (add-inner (specify-preprocessor clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|static|)   (push clause attributes))
		            ((key-eq construct '|decl|)     (push clause attributes))
		            ((key-eq construct '|inline|)   (push clause attributes))
		            ((key-eq construct '|register|) (push clause attributes))
		            ((key-eq construct '|auto|)     (push clause attributes))
		            ((key-eq construct '|extern|)   (push clause attributes))
		            ((key-eq construct '|volatile|) (push clause attributes))
		            ((key-eq construct '|include|)  (setq attributes '()))
		            ((key-eq construct '|var|)
		             (add-inner (specify-variable clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|func|)
		             (add-inner (specify-function clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|method|)
		             (add-inner (specify-function clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|enum|)
		             (add-inner (specify-enum     clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|struct|)
		             (add-inner (specify-struct   clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|union|)
		             (add-inner (specify-union    clause attributes) module-specifier)
		             (setq attributes '()))
		            ((key-eq construct '|guard|)
		             (add-inner (specify-guard    clause attributes) module-specifier)
                     (setq attributes '()))
		            ((key-eq construct '|module|)
		             (add-inner (specify-module   clause attributes) module-specifier)
		             (setq attributes '()))
		            (t (add-inner (specify-expr   clause) module-specifier)
                       (setq attributes '()))))
	        (error (format nil "syntax error ~A" clause)))))
    (setq *module-path* tmp-module-path)
    (setq *module-spec* tmp-module-spec)
    module-specifier))

(defun compile-module (spec lvl globals parent-spec &key from-body ((:nested is-nested) nil))
  (let ((name (name spec)))
    (if *target-header*
        (progn ; in header file
          (compile-body-map (inners spec) lvl globals spec))
        (progn ; in source file
          (compile-body-map (inners spec) lvl globals spec)))))
